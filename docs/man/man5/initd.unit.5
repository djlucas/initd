.TH INITD.UNIT 5 "2025" "initd 0.1" "File Formats"
.SH NAME
initd.unit \- initd unit file format
.SH SYNOPSIS
.nf
/etc/initd/system/*.{service,timer,socket,target}
/lib/initd/system/*.{service,timer,socket,target}
.fi
.SH DESCRIPTION
Unit files are plain text INI-style configuration files that encode information
about services, timers, sockets, and targets managed by
.BR initd .
Unit files are compatible with the systemd unit file format, allowing reuse of
existing unit files where beneficial.
.PP
Unit files are loaded from multiple directories with the following priority:
.IP 1. 4
.I /etc/initd/system/
\- Local administrator configurations (highest priority)
.IP 2.
.I /lib/initd/system/
\- Distribution-provided units
.IP 3.
.I /etc/systemd/system/
\- Compatibility with systemd units
.IP 4.
.I /lib/systemd/system/
\- Compatibility with systemd units (lowest priority)
.PP
When the same unit file exists in multiple directories, the file from the
higher-priority directory is used.
.SH UNIT FILE STRUCTURE
Unit files consist of sections denoted by
.B [Section]
headers, followed by key-value pairs in the format
.BR Key=Value .
.PP
Common sections:
.IP \(bu 2
.B [Unit]
\- Generic unit information and dependencies
.IP \(bu
.B [Service]
\- Service-specific configuration
.IP \(bu
.B [Timer]
\- Timer-specific configuration
.IP \(bu
.B [Socket]
\- Socket-specific configuration
.IP \(bu
.B [Install]
\- Installation information for enable/disable
.SH [UNIT] SECTION
The
.B [Unit]
section contains generic information about the unit that is not dependent on
the type of unit.
.TP
.B Description=
A human-readable description of the unit.
.TP
.B AllowIsolate=
Boolean. When true, permits this target to be used as the destination for an
isolation request (initctl isolate). Only meaningful for .target units.
Default: false.
.TP
.B After=
Space-separated list of unit names. This unit will be started after the
specified units are active. Used for ordering only, not dependencies.
.TP
.B Before=
Space-separated list of unit names. This unit will be started before the
specified units. Used for ordering only, not dependencies.
.TP
.B Requires=
Space-separated list of unit names. This unit requires the specified units
to be active. If any required unit fails, this unit will fail.
.TP
.B BindsTo=
Stronger variant of Requires. The bound units are started with this unit and
any transition of the bound unit to the inactive or failed state immediately
stops this unit as well.
.TP
.B PartOf=
Declares that the unit is a member of another unit. Stopping or reloading the
listed parent units stops or reloads this unit in lockstep. Combine with
WantedBy=/RequiredBy= to start the member units.
.TP
.B Wants=
Space-separated list of unit names. This unit wants the specified units
to be active. If a wanted unit fails, this unit continues running.
.TP
.B StopWhenUnneeded=
Boolean. If set to true, the unit will be stopped automatically when no
active unit still requires or wants it. Default: false.
.TP
.B StartLimitIntervalSec=
Time window used with StartLimitBurst. Values below the initd default of
60 seconds are ignored; larger values replace the default. Default: 60s.
.TP
.B StartLimitBurst=
Maximum restarts permitted within StartLimitIntervalSec. Values below the
initd default of 5 are ignored; larger values relax the limit. Default: 5.
.TP
.B StartLimitAction=
Action to take when the start limit is hit. Recognised values are
\fInone\fR (default), \fIreboot\fR, \fIreboot-force\fR,
\fIexit-force\fR, and \fIreboot-immediate\fR. Non-default actions are
logged but not currently acted upon.
.TP
.B RefuseManualStart=
Boolean. When true, manual start attempts via initctl/systemctl are
rejected. Dependency-triggered activations still succeed. Default: false.
.TP
.B RefuseManualStop=
Boolean. When true, manual stop attempts are rejected. Dependency-driven
stops (including StopWhenUnneeded) still occur. Default: false.
.TP
.B Conflicts=
Space-separated list of unit names. This unit conflicts with the specified
units. Starting this unit will stop conflicting units.
.TP
.B DefaultDependencies=
Boolean. When true (default), adds implicit dependencies for .service, .timer,
and .socket units:
.B After=basic.target Conflicts=shutdown.target Before=shutdown.target.
Set to false to suppress these defaults. Default: yes.
.TP
.B ConditionPathExists=
Absolute path to a file or directory. The unit will be skipped if the path
does not exist. Prefix the path with \fB!\fR to invert the check.
.TP
.B ConditionPathExistsGlob=
Glob pattern that must match at least one path. Prefix with \fB!\fR to invert
the condition.
.TP
.B ConditionPathIsDirectory=
Path that must exist and be a directory. Prefix with \fB!\fR to require that
the path is not a directory.
.TP
.B ConditionPathIsSymbolicLink=
Path that must exist and be a symbolic link. Prefix with \fB!\fR to invert.
.TP
.B ConditionPathIsMountPoint=
Path that must be a mount point. Prefix with \fB!\fR to require that it is
not a mount point.
.TP
.B ConditionPathIsReadWrite=
Path that must be writable (and executable when a directory). Prefix with
\fB!\fR to invert.
.TP
.B ConditionDirectoryNotEmpty=
Directory that must contain at least one entry other than '.' or '..'.
Prefix with \fB!\fR to require that the directory is empty.
.TP
.B ConditionFileIsExecutable=
Path that must reference an executable regular file. Prefix with \fB!\fR to
invert.
.TP
.B ConditionFileNotEmpty=
Path that must reference a non-empty regular file. Prefix with \fB!\fR to
invert.
.TP
.B ConditionUser=
User name or numeric UID. The unit will be skipped if not running as the
specified user. Special value \fB@system\fR means superuser (UID 0). Prefix
with \fB!\fR to invert.
.TP
.B ConditionGroup=
Group name or numeric GID. The unit will be skipped if not running as the
specified group. Prefix with \fB!\fR to invert.
.TP
.B ConditionHost=
Hostname that must match the system hostname (via gethostname()). Prefix with
\fB!\fR to invert.
.TP
.B ConditionArchitecture=
CPU architecture (e.g., x86-64, arm64, arm, x86). Matches against uname machine
type with common systemd architecture name mappings. Prefix with \fB!\fR to
invert.
.TP
.B ConditionMemory=
Minimum system memory in bytes (supports K, M, G suffixes). The unit will be
skipped if system has less than the specified amount. Prefix with \fB!\fR to
invert.
.TP
.B ConditionCPUs=
CPU count requirement. May be a number or comparison operator (>=2, <4, etc.).
The unit will be skipped if the requirement is not met. Prefix with \fB!\fR to
invert.
.TP
.B ConditionEnvironment=
Environment variable check. Format: \fBVAR\fR (exists) or \fBVAR=value\fR
(exact match). The unit will be skipped if the condition fails. Prefix with
\fB!\fR to invert.
.TP
.B ConditionVirtualization=
Virtualization/container detection. Matches VM types (\fBkvm\fR, \fBqemu\fR,
\fBvmware\fR, \fBoracle\fR, \fBxen\fR, \fBmicrosoft\fR, \fBbhyve\fR) or
container types (\fBdocker\fR, \fBopenvz\fR, \fBjail\fR). Special values:
\fBvm\fR (any VM), \fBcontainer\fR (any container). Linux: DMI/sysfs detection.
FreeBSD: kern.vm_guest sysctl and jail detection. macOS: hypervisor detection
via sysctl. Prefix with \fB!\fR to invert.
.TP
.B ConditionACPower=
AC power status check. Value: \fBtrue\fR (on AC power) or \fBfalse\fR (on
battery). Linux: \fB/sys/class/power_supply\fR. FreeBSD: hw.acpi.acline
sysctl. OpenBSD/NetBSD: /dev/apm. macOS: hw.model heuristic. Defaults to AC
if detection unavailable. Prefix with \fB!\fR to invert.
.TP
.B ConditionOSRelease=
OS release file parsing. Format: \fBKEY=value\fR. Checks
\fB/etc/os-release\fR or \fB/usr/lib/os-release\fR for matching key-value
pairs (e.g., \fBID=debian\fR, \fBVERSION_ID=12\fR). Prefix with \fB!\fR to
invert.
.TP
.B ConditionKernelVersion=
Kernel version comparison. Format: \fBOP VERSION\fR where OP is \fB>=\fR,
\fB<=\fR, \fB>\fR, \fB<\fR, or \fB=\fR (e.g., \fB>=5.10\fR, \fB<6.0\fR).
Uses \fBuname()\fR for detection. Version format varies by OS. Prefix with
\fB!\fR to invert.
.TP
.B ConditionKernelCommandLine=
Kernel command line parameter check (Linux only). Checks \fB/proc/cmdline\fR
for the specified keyword. Example: \fBConditionKernelCommandLine=quiet\fR.
On non-Linux platforms, logs a warning and returns false. Prefix with \fB!\fR
to invert.
.TP
.B ConditionKernelModuleLoaded=
Kernel module loaded check (Linux only). Checks \fB/proc/modules\fR and
\fB/sys/module/\fR for the specified module name. Example:
\fBConditionKernelModuleLoaded=ext4\fR. On non-Linux platforms, logs a warning
and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionSecurity=
Linux Security Module detection (Linux only). Detects active LSMs: \fBselinux\fR,
\fBapparmor\fR, \fBsmack\fR, \fBima\fR, \fBtpm2\fR. Checks
\fB/sys/fs/selinux\fR, \fB/sys/kernel/security/apparmor\fR,
\fB/sys/kernel/security/smack\fR, \fB/sys/kernel/security/ima\fR, and
\fB/sys/class/tpm\fR. On non-Linux platforms, logs a warning and returns false.
Prefix with \fB!\fR to invert.
.TP
.B ConditionCapability=
Linux capability check (Linux only). Currently simplified to root check. Will
check for specific Linux capabilities in future implementation. On non-Linux
platforms, logs a warning and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionControlGroupController=
Cgroup controller availability check (Linux only). Checks for cgroup v1
controllers in \fB/proc/cgroups\fR and cgroup v2 controllers in
\fB/sys/fs/cgroup/cgroup.controllers\fR. Example:
\fBConditionControlGroupController=memory\fR. On non-Linux platforms, logs a
warning and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionMemoryPressure=
Memory pressure check via PSI (Linux only). Checks
\fB/proc/pressure/memory\fR for pressure stall information. On non-Linux
platforms, logs a warning and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionCPUPressure=
CPU pressure check via PSI (Linux only). Checks \fB/proc/pressure/cpu\fR for
pressure stall information. On non-Linux platforms, logs a warning and returns
false. Prefix with \fB!\fR to invert.
.TP
.B ConditionIOPressure=
I/O pressure check via PSI (Linux only). Checks \fB/proc/pressure/io\fR for
pressure stall information. On non-Linux platforms, logs a warning and returns
false. Prefix with \fB!\fR to invert.
.TP
.B ConditionPathIsEncrypted=
Path encryption check (Linux only). Detects if a path is on an encrypted
device via dm-crypt/LUKS. Checks \fB/sys/block/dm-*/dm/name\fR for crypt
devices. On non-Linux platforms, logs a warning and returns false. Prefix with
\fB!\fR to invert.
.TP
.B ConditionFirmware=
Firmware type detection (Linux only). Detects \fBuefi\fR (via
\fB/sys/firmware/efi\fR) or \fBdevice-tree\fR (via
\fB/proc/device-tree\fR). On non-Linux platforms, logs a warning and returns
false. Prefix with \fB!\fR to invert.
.TP
.B ConditionCPUFeature=
CPU feature flag check (Linux only). Checks \fB/proc/cpuinfo\fR for CPU
feature flags. Example: \fBConditionCPUFeature=avx2\fR. On non-Linux platforms,
logs a warning and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionVersion=
Version comparison check (Linux only). Compares systemd/kernel/library versions.
Currently a stub implementation. On non-Linux platforms, logs a warning and
returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionCredential=
Systemd credential check (Linux only). Checks for credentials in
\fB/run/credentials/\fR. Example: \fBConditionCredential=my-secret\fR. On
non-Linux platforms, logs a warning and returns false. Prefix with \fB!\fR to
invert.
.TP
.B ConditionNeedsUpdate=
Update marker check (Linux only). Checks for systemd update markers in
\fB/etc/.updated\fR or \fB/var/.updated\fR. On non-Linux platforms, logs a
warning and returns false. Prefix with \fB!\fR to invert.
.TP
.B ConditionFirstBoot=
First boot detection (Linux only). Validates \fB/etc/machine-id\fR for
systemd-style first boot detection. On non-Linux platforms, logs a warning and
returns false. Prefix with \fB!\fR to invert.
.TP
.B AssertPathExists=, AssertPathExistsGlob=, AssertPathIsDirectory=, AssertPathIsSymbolicLink=, AssertPathIsMountPoint=, AssertPathIsReadWrite=, AssertDirectoryNotEmpty=, AssertFileIsExecutable=, AssertFileNotEmpty=, AssertUser=, AssertGroup=, AssertHost=, AssertArchitecture=, AssertMemory=, AssertCPUs=, AssertEnvironment=, AssertVirtualization=, AssertACPower=, AssertOSRelease=, AssertKernelVersion=, AssertKernelCommandLine=, AssertKernelModuleLoaded=, AssertSecurity=, AssertCapability=, AssertControlGroupController=, AssertMemoryPressure=, AssertCPUPressure=, AssertIOPressure=, AssertPathIsEncrypted=, AssertFirmware=, AssertCPUFeature=, AssertVersion=, AssertCredential=, AssertNeedsUpdate=, AssertFirstBoot=
Assert equivalents of Condition directives. Unlike conditions which silently skip
unit activation, failed assertions abort the start job with error logging (state
becomes failed). Use assertions for critical requirements that indicate
misconfiguration. All support \fB!\fR prefix for negation.
.TP
.B Provides=
Symbolic name for this unit. Other units can depend on this name, and any
unit providing it will satisfy the dependency.
.SH [SERVICE] SECTION
The
.B [Service]
section contains service-specific configuration.
.SS Command Configuration
.TP
.B Type=
Service type. One of:
.RS
.IP \(bu 2
.B simple
\- The process specified by ExecStart is the main process (default)
.IP \(bu
.B forking
\- The process forks and the parent exits; PIDFile should be set
.IP \(bu
.B oneshot
\- Short-lived process; RemainAfterExit controls restart behavior
.RE
.TP
.B ExecStart=
Command line to execute to start the service. Must be an absolute path.
Shell syntax is not supported; use
.B /bin/sh -c "..."
for shell commands. Required.
.TP
.B ExecStartPre=
Command line to execute before ExecStart. May be specified multiple times.
.TP
.B ExecStartPost=
Command line to execute after ExecStart. May be specified multiple times.
.TP
.B ExecCondition=
Command that must succeed before ExecStartPre/ExecStart run. Each listed
command is executed in order and the unit is skipped if any exits non-zero.
.TP
.B ExecStop=
Command line to execute to stop the service. If not specified, the service
is terminated by sending SIGTERM.
.TP
.B ExecStopPost=
Command line to execute after the service has been stopped. May be specified
multiple times.
.TP
.B ExecReload=
Command line to execute to reload the service configuration. Typically sends
SIGHUP to the main process.
.SS Process Configuration
.TP
.B User=
User name or UID to run the service as. If not specified, runs as root.
.TP
.B Group=
Group name or GID to run the service as. If not specified, uses the user's
primary group.
.TP
.B WorkingDirectory=
Working directory to use for the service process. If not specified, uses
the root directory.
.TP
.B PIDFile=
Absolute path to a PID file. When provided, initd waits for the file and
tracks the recorded PID (values below initd defaults are ignored).
.SS Environment Configuration
.TP
.B Environment=
Set environment variables. Format:
.BR "KEY=VALUE" .
May be specified multiple times.
.TP
.B EnvironmentFile=
Absolute path to a file containing environment variables in
.BR KEY=VALUE
format, one per line. Lines starting with # are comments.
.SS Restart Configuration
.TP
.B Restart=
Restart policy. One of:
.RS
.IP \(bu 2
.B no
\- Never restart (default)
.IP \(bu
.B always
\- Always restart regardless of exit code
.IP \(bu
.B on-failure
\- Restart only on failure (non-zero exit code)
.RE
.TP
.B RestartSec=
Time to wait before restarting a service. Takes a time value in seconds
(optionally with unit suffix: s, min, h). Default: 100ms.
.TP
.B RestartMaxDelaySec=
Maximum delay for exponential backoff when restarting a service. When set,
the restart delay starts at RestartSec and doubles with each restart until
it reaches this maximum value. For example, with RestartSec=1 and
RestartMaxDelaySec=60, delays will be: 1s, 2s, 4s, 8s, 16s, 32s, 60s, 60s...
This prevents rapid restart loops while allowing eventual recovery. Default: 0
(no exponential backoff, constant RestartSec delay).
.TP
.B RestartPreventExitStatus=
Space-separated list of numeric exit codes that should never trigger a
restart even when Restart= would do so. Values outside the range 0-255 are
ignored.
.TP
.B RestartForceExitStatus=
Space-separated list of exit codes that always trigger a restart, even when
Restart=no. Values outside the range 0-255 are ignored.
.SS Timeout Configuration
.TP
.B TimeoutStartSec=
Time to wait for service startup. For Type=oneshot services, if the service
does not complete within this time, it is killed according to
TimeoutStartFailureMode. For Type=simple services, this is primarily useful
as a monitoring period to detect immediate crashes. Default: 90s.
.TP
.B TimeoutStopSec=
Time to wait for service shutdown. If the service does not stop within
this time, it is terminated with SIGABRT (if TimeoutAbortSec is set) or
SIGKILL. Default: 90s.
.TP
.B TimeoutAbortSec=
Configures an intermediate timeout for service stop operations. When
TimeoutStopSec expires, the service is first sent SIGABRT instead of SIGKILL.
If the service does not terminate within TimeoutAbortSec, SIGKILL is sent.
This allows services to generate core dumps on stop timeout. If set to 0 or
not set, SIGKILL is sent immediately when TimeoutStopSec expires. Default: 0
(not set).
.TP
.B TimeoutStartFailureMode=
Configures which signal to send when a startup timeout occurs (TimeoutStartSec
expires). Valid values are
.B terminate
(send SIGTERM),
.B abort
(send SIGABRT for core dump), and
.B kill
(send SIGKILL immediately). This is primarily relevant for Type=oneshot
services that may hang during initialization. Default: terminate.
.TP
.B RemainAfterExit=
Boolean. If true, the service is considered active even after the process
exits. Useful for Type=oneshot. Default: false.
.SS Standard Input/Output/Error
.TP
.B StandardInput=
Controls where the service reads standard input from. Supported values:
.RS
.IP \(bu 2
.B inherit
\- Inherit from parent process (default)
.IP \(bu
.B null
\- Redirect to /dev/null
.IP \(bu
.B tty
\- Connect to TTY specified by TTYPath=
.IP \(bu
.B tty-force
\- Like tty but force even if not a TTY
.IP \(bu
.B file:path
\- Read from the specified file path
.IP \(bu
.B socket
\- Read from socket (for socket-activated services)
.IP \(bu
.B data
\- Read from embedded data (use with StandardInputText= or StandardInputData=)
.RE
.TP
.B StandardOutput=
Controls where the service writes standard output. Supported values:
.RS
.IP \(bu 2
.B inherit
\- Inherit from parent, captured and logged to syslog (default)
.IP \(bu
.B null
\- Redirect to /dev/null
.IP \(bu
.B tty
\- Connect to TTY specified by TTYPath=
.IP \(bu
.B journal
\- Systemd compatibility alias for inherit (logged to syslog)
.IP \(bu
.B syslog
\- Logged to syslog (same as inherit, our default behavior)
.IP \(bu
.B file:path
\- Write to the specified file path (created/truncated)
.IP \(bu
.B socket
\- Write to socket (for socket-activated services)
.RE
.TP
.B StandardError=
Controls where the service writes standard error. Same values as StandardOutput=.
.TP
.B StandardInputText=
Append a line of text to StandardInput= buffer when using StandardInput=data.
Multiple lines may be specified. Each line is automatically followed by a newline character.
C-style escape sequences (like \\n, \\t) are supported.
.TP
.B StandardInputData=
Append base64-encoded binary data to StandardInput= buffer when using StandardInput=data.
Multiple entries may be specified and are decoded and concatenated in order.
Whitespace in the base64 string is ignored.
.TP
.B TTYPath=
Absolute path to TTY device when using StandardInput=tty, StandardOutput=tty,
or StandardError=tty. Example: /dev/console or /dev/tty1.
.SS Security and Resource Control
.TP
.B PrivateTmp=
Boolean. If true, the service gets a private /tmp directory that is isolated
from other services. Implemented using mount namespaces on Linux. Not
supported on other platforms. Default: false.
.TP
.B LimitNOFILE=
Maximum number of open file descriptors for the service. May be a number or
.B infinity
to remove the limit. Default: inherit from system.
.TP
.B LimitCPU=
Maximum CPU time in seconds. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_CPU. Default: inherit from system.
.TP
.B LimitFSIZE=
Maximum file size in bytes that the process may create. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_FSIZE. Default: inherit from system.
.TP
.B LimitDATA=
Maximum size of the process's data segment in bytes. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_DATA. Default: inherit from system.
.TP
.B LimitSTACK=
Maximum size of the process stack in bytes. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_STACK. Default: inherit from system.
.TP
.B LimitCORE=
Maximum size of core files in bytes. Set to 0 to disable core dumps. May be
.B infinity
to remove the limit. Corresponds to RLIMIT_CORE. Default: inherit from system.
.TP
.B LimitRSS=
Maximum resident set size in bytes (deprecated on Linux). May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_RSS. Default: inherit from system.
.TP
.B LimitAS=
Maximum size of the process's virtual memory (address space) in bytes. May be a
number or
.B infinity
to remove the limit. Corresponds to RLIMIT_AS. Default: inherit from system.
.TP
.B LimitNPROC=
Maximum number of processes that can be created. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_NPROC. Default: inherit from system.
.TP
.B LimitMEMLOCK=
Maximum number of bytes that may be locked into memory. May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_MEMLOCK. Default: inherit from system.
.TP
.B LimitLOCKS=
Maximum number of file locks (obsolete on Linux since kernel 2.4.25). May be a
number or
.B infinity
to remove the limit. Corresponds to RLIMIT_LOCKS. Default: inherit from system.
.TP
.B LimitSIGPENDING=
Maximum number of queued signals (Linux only). May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_SIGPENDING. Not supported on BSD or
Hurd. Default: inherit from system.
.TP
.B LimitMSGQUEUE=
Maximum number of bytes in POSIX message queues (Linux only). May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_MSGQUEUE. Not supported on BSD or
Hurd. Default: inherit from system.
.TP
.B LimitNICE=
Maximum nice priority for the process (Linux only). May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_NICE. Not supported on BSD or Hurd.
Default: inherit from system.
.TP
.B LimitRTPRIO=
Maximum real-time scheduling priority (Linux only). May be a number or
.B infinity
to remove the limit. Corresponds to RLIMIT_RTPRIO. Not supported on BSD or Hurd.
Default: inherit from system.
.TP
.B LimitRTTIME=
Maximum CPU time for real-time tasks in microseconds (Linux only). May be a
number or
.B infinity
to remove the limit. Corresponds to RLIMIT_RTTIME. Not supported on BSD or Hurd.
Default: inherit from system.
.TP
.B KillMode=
Specifies how processes of this service should be terminated. One of:
.RS
.IP \(bu 2
.B process
\- Only terminate the main process (default)
.IP \(bu
.B control-group
\- Terminate all processes in the service's process group
.IP \(bu
.B mixed
\- SIGTERM to main process, then SIGKILL to all processes after 100ms
.IP \(bu
.B none
\- Don't send any signals; service must exit on its own
.RE
.IP
All services run in their own process group. KillMode determines which
processes receive termination signals.
.TP
.B SyslogIdentifier=
Sets the program name used for syslog messages. If not specified, uses the
service unit name. Example: SyslogIdentifier=my-daemon.
.TP
.B SyslogFacility=
Sets the syslog facility for log messages. Supported values: daemon, user,
local0 through local7. Default: daemon.
.TP
.B SyslogLevel=
Sets the minimum syslog level for filtering messages. Supported values:
emerg, alert, crit, err, warning, notice, info, debug. Default: info.
.TP
.B SyslogLevelPrefix=
Boolean. If true, parse BSD syslog priority prefix from service output
(e.g., "<3>" for LOG_ERR). Default: false.
.TP
.B UMask=
Sets the file mode creation mask (umask) for the service process in octal
notation. Determines default permissions for created files and directories.
Example: UMask=0022 (owner rw, group r, other r).
.TP
.B NoNewPrivileges=
Boolean. If true, ensures the service process and all its children can never
gain new privileges through execve(). This prevents privilege escalation via
setuid/setgid binaries and file capabilities. Implemented using
.BR prctl(PR_SET_NO_NEW_PRIVS)
on Linux and
.BR procctl(PROC_NO_NEW_PRIVS_CTL)
on FreeBSD. Not supported on OpenBSD or GNU Hurd (logs warning and continues).
Default: false.
.TP
.B RootDirectory=
Takes an absolute directory path. Sets the root directory for the service
process using
.BR chroot(2) .
The service and all its children will be confined to this directory tree,
unable to access files outside the jail. All required binaries, libraries,
and files must exist within the specified directory. The chroot is applied
before dropping privileges to the service user. Note that
.BR chroot(2)
does not change the current working directory, so the service automatically
changes to / within the chroot after the chroot call. This provides
filesystem isolation for security hardening. Available on all POSIX systems
(Linux, BSD, Hurd). Example: RootDirectory=/var/chroot/myservice
.TP
.B RestrictSUIDSGID=
Boolean. If true, ensures any execve() calls cannot gain privileges via
setuid/setgid file mode bits. Implemented using
.BR prctl(PR_SET_NO_NEW_PRIVS)
on Linux and
.BR procctl(PROC_NO_NEW_PRIVS_CTL)
on FreeBSD. Not supported on NetBSD, OpenBSD, or GNU Hurd (logs warning and
continues). This is similar to NoNewPrivileges but specifically targets
suid/sgid execution. Default: false.
.TP
.B MemoryLimit=
Sets the maximum memory (address space) the service process may use. May be a
number in bytes or
.B infinity
to remove the limit. This is a simplified alias for LimitAS that matches
systemd's MemoryLimit directive. Uses
.BR setrlimit(RLIMIT_AS)
which is POSIX portable. Example: MemoryLimit=1073741824 (1 GB). Default:
inherit from system.
.SH [TIMER] SECTION
The
.B [Timer]
section contains timer-specific configuration. Timer units activate
associated service units at scheduled times.
.TP
.B OnCalendar=
Calendar event expression. Format:
.BR "DayOfWeek Year-Month-Day Hour:Minute:Second" .
Supports shortcuts: daily, weekly, monthly, hourly.
.TP
.B OnBootSec=
Time to wait after boot before activating. Takes a time value.
.TP
.B OnStartupSec=
Time to wait after the timer is started before activating.
.TP
.B OnUnitActiveSec=
Time to wait after the unit was last activated.
.TP
.B OnUnitInactiveSec=
Time to wait after the unit was last deactivated.
.TP
.B Persistent=
Boolean. If true, catch up on missed runs after system boot. Default: false.
.TP
.B RandomizedDelaySec=
Random delay to add to timer events to prevent multiple timers from firing
simultaneously.
.SH [SOCKET] SECTION
The
.B [Socket]
section contains socket-specific configuration. Socket units listen on
network or Unix sockets and activate associated services on connection.
.TP
.B ListenStream=
TCP socket or Unix stream socket to listen on. For TCP:
.BR [address]:port .
For Unix:
.BR /path/to/socket .
May be specified multiple times.
.TP
.B ListenDatagram=
UDP socket or Unix datagram socket to listen on. Same format as ListenStream.
May be specified multiple times.
.TP
.B Accept=
Boolean. If true, a separate service instance is spawned for each connection
(inetd-style). If false, all connections are passed to one service instance.
Default: false.
.TP
.B IdleTimeout=
Time to wait before stopping an idle service. This is an initd-specific
extension not present in systemd. Takes a time value.
.SH [INSTALL] SECTION
The
.B [Install]
section contains installation information used by
.BR "initctl enable"
and
.BR "initctl disable" .
.TP
.B WantedBy=
Space-separated list of target units. When this unit is enabled, symbolic
links are created in the .wants/ directories of the specified targets.
.TP
.B RequiredBy=
Space-separated list of target units. When this unit is enabled, symbolic
links are created in the .requires/ directories of the specified targets.
.TP
.B Also=
Space-separated list of units that should be enabled/disabled along with
this unit.
.SH UNIT TYPES
.SS Service Units (.service)
Service units describe system services. They are the most common unit type
and describe how to start, stop, and restart services.
.SS Timer Units (.timer)
Timer units activate associated service units at scheduled times. The service
unit should have the same base name (e.g., backup.timer activates
backup.service).
.SS Socket Units (.socket)
Socket units activate associated service units on incoming connections. The
service receives the connected socket as file descriptor 3.
.SS Target Units (.target)
Target units group other units together, similar to SysV runlevels. They
have no specific configuration beyond the [Unit] section.
.SH UNSUPPORTED UNIT TYPES
The following systemd unit types are not supported:
.IP \(bu 2
.B .mount
\- Use /etc/fstab instead
.IP \(bu
.B .automount
\- Use /etc/fstab with auto mount options
.IP \(bu
.B .swap
\- Use /etc/fstab for swap configuration
.IP \(bu
.B .path
\- Path-based activation not implemented
.IP \(bu
.B .device
\- Hardware management not implemented
.IP \(bu
.B .scope
\- Runtime-created units (systemd internal)
.IP \(bu
.B .slice
\- cgroup hierarchy management (not implemented)
.SH SPECIFIERS
Unit files support the following specifiers that are replaced at runtime:
.TP
.B %I
Instance name for template units (e.g., eth0 for network@eth0.service)
.TP
.B %i
Same as %I but with escaping for file system paths
.TP
.B %p
Unit name prefix (everything before the @)
.SH EXAMPLES
.SS Simple Service
.nf
[Unit]
Description=My Application
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/myapp --foreground
User=myapp
Group=myapp
Restart=always
RestartSec=10s

[Install]
WantedBy=multi-user.target
.fi
.SS Forking Service with Security
.nf
[Unit]
Description=Web Server
After=network.target

[Service]
Type=forking
PIDFile=/run/webserver.pid
ExecStart=/usr/sbin/webserver
ExecReload=/bin/kill -HUP $MAINPID
User=www
Group=www
PrivateTmp=true
LimitNOFILE=65536
KillMode=control-group

[Install]
WantedBy=multi-user.target
.fi
.SS Template Service
.nf
[Unit]
Description=Configure %I network interface
After=network-pre.target

[Service]
Type=oneshot
EnvironmentFile=/etc/sysconfig/ifconfig.%I
ExecStart=/usr/libexec/initd/network-services/static %I up
ExecStop=/usr/libexec/initd/network-services/static %I down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
.fi
.SS Timer Unit
.nf
[Unit]
Description=Daily Backup

[Timer]
OnCalendar=daily
Persistent=true
RandomizedDelaySec=10min

[Install]
WantedBy=timers.target
.fi
.SS Socket Unit
.nf
[Unit]
Description=SSH Socket

[Socket]
ListenStream=22
Accept=no
IdleTimeout=5min

[Install]
WantedBy=sockets.target
.fi
.SH FILES
.TP
.I /etc/initd/system/*.service
Local service unit files
.TP
.I /lib/initd/system/*.service
System service unit files
.TP
.I /etc/sysconfig/*
Environment configuration files for services
.SH SEE ALSO
.BR initctl (1),
.BR systemctl (1),
.BR init (8),
.BR supervisor-worker (8),
.BR timer-daemon (8),
.BR socket-activator (8)
.SH NOTES
.SS Differences from systemd
.IP \(bu 2
.B IdleTimeout=
in socket units is an initd extension
.IP \(bu
.B PrivateTmp=
is Linux-only (systemd supports it everywhere)
.IP \(bu
.B KillMode=
uses process groups instead of cgroups for portability
.IP \(bu
Many advanced systemd directives are not supported
.SS Platform Compatibility
.IP \(bu 2
.B PrivateTmp=
only works on Linux (uses mount namespaces)
.IP \(bu
.B KillMode=
and most
.B Limit*
directives are portable (POSIX standard)
.IP \(bu
.BR LimitSIGPENDING= ", " LimitMSGQUEUE= ", " LimitNICE= ", " LimitRTPRIO= ", and " LimitRTTIME=
are Linux-only (not available on BSD or Hurd)
.IP \(bu
.B LimitRSS=
is deprecated on Linux but available on BSD
.IP \(bu
.B LimitLOCKS=
is obsolete on Linux (since kernel 2.4.25) but may work on other platforms
.IP \(bu
Services run in process groups for proper lifecycle management
.SH AUTHOR
Written for the initd project.
.SH COPYRIGHT
Copyright \(co 2025. Licensed under the MIT License.
